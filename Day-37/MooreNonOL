module MooreNonOL (
    input in, clk, reset,  
    output reg out         
);

        parameter S0 = 0, S1 = 1, S2 = 2, S3 = 3, S4 = 4;
    
    reg [2:0] present_state, next_state;

    reg new_out;

    always @(posedge clk or posedge reset)
    begin
        if (reset)
            present_state <= S0;  
        else
            present_state <= next_state;  
    end

    always @(present_state or in)
    begin
        case (present_state)
            S0: begin
                if (in)
                    next_state = S1;
                else
                    next_state = S0;
                new_out = 0;
            end
            S1: begin
                if (in)
                    next_state = S2;
                else
                    next_state = S0;
                new_out = 0;
            end
            S2: begin
                if (in)
                    next_state = S2;
                else
                    next_state = S3;
                new_out = 0;
            end
            S3: begin
                if (in)
                    next_state = S4;
                else
                    next_state = S0;
                new_out = 0;
            end
            S4: begin
                if (in)
                    next_state = S1;
                else
                    next_state = S0;
                new_out = 1;
            end
        endcase
    end

endmodule
